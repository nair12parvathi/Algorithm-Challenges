CountLIS:

Given is a sequence of integers: X = {x1, x2, . . . , xn}. Design an O(n 2 ) dynamic programming algorithm that computes the number of longest increasing subsequences of X. For example, suppose X = {6, 8, 5, 7, 11, 10, 12}. Then the answer is 6. The longest increasing subsequence is length 4, and there are 6 such subsequences: {6, 8, 11, 12}, {6, 7, 11, 12}, {5, 7, 11, 12}, {6, 8, 10, 12}, {6, 7, 10, 12}, {5, 7, 10, 12}

Input specification: the first line contains n and the next line contains x1, ..., xn, separated by spaces. You may assume that n is at most 10000. 

Output specification: the output contains a single line containing the integer-valued number of longest increasing subsequences. (Include the new-line character in your output line.) 


Sample Input and Output:

1.

7
6 8 5 7 11 10 12

>>6

2.

36
1 2 2 3 3 3 4 4 4 4 5 5 5 5 5 6 6 6 6 6 6 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8

>>40320

3.

10
10 9 8 7 6 5 4 3 2 1

>>10

4.

1000
37 69 12 67 65 84 45 42 1 54 27 99 98 41 84 68 81 51 90 85 32 43 21 21 90 64 38 65 83 39 99 9 13 95 87 35 96 34 60 91 12 29 46 99 52 27 56 62 83 68 88 45 36 16 61 0 14 34 42 37 97 22 93 79 90 71 95 37 81 12 36 58 51 24 44 58 83 63 79 63 75 44 46 40 96 53 23 42 13 99 72 83 15 30 39 82 79 89 53 98 44 60 87 58 0 9 95 89 98 97 72 82 88 9 12 27 53 43 66 48 64 98 4 29 83 60 55 64 96 35 20 12 59 7 0 74 31 88 3 52 36 0 33 60 37 21 27 77 99 66 22 36 82 50 34 58 83 10 64 17 77 35 48 39 3 97 3 21 13 3 62 85 14 61 25 50 62 58 95 16 70 91 8 36 71 75 35 21 86 49 51 92 48 70 90 17 99 1 2 44 60 96 99 1 21 50 13 34 19 76 46 17 24 16 80 37 96 45 83 31 85 8 38 9 14 13 53 91 26 14 71 39 60 58 37 97 49 65 25 40 71 60 73 69 75 83 24 93 32 96 77 28 97 81 33 8 24 84 69 71 44 67 74 75 53 3 96 71 28 41 35 62 29 72 62 56 59 68 86 17 91 26 3 35 90 71 75 7 44 8 81 12 42 54 62 53 22 77 70 81 81 68 6 22 28 19 72 69 64 11 94 47 30 92 75 3 21 99 20 42 32 55 51 89 81 56 74 78 31 13 78 95 86 1 23 67 29 88 80 35 68 0 85 22 14 9 92 78 16 65 22 21 56 95 36 60 64 49 82 59 52 75 74 2 67 62 48 26 19 17 37 4 20 7 15 94 61 63 89 85 99 34 71 24 52 24 8 17 11 57 73 99 21 46 45 6 43 6 26 71 97 54 81 55 98 60 16 95 50 10 88 17 95 88 20 51 78 30 10 41 96 13 54 28 90 90 18 17 81 51 92 23 75 88 90 13 23 69 1 4 41 37 68 46 31 86 44 3 46 72 98 97 9 31 83 25 51 70 22 21 89 0 87 79 4 88 33 4 94 5 66 90 70 28 8 23 81 7 94 81 19 66 11 97 52 6 16 48 58 27 77 15 47 0 94 9 25 16 91 0 29 27 68 93 20 72 97 53 71 18 66 77 6 86 54 61 43 25 29 13 48 5 85 93 0 82 15 86 46 58 64 8 0 84 87 62 55 9 39 4 56 38 5 69 22 2 82 82 72 90 82 52 40 12 38 33 4 49 11 39 12 18 57 45 92 43 0 33 85 82 15 85 55 41 43 83 94 48 90 49 31 19 20 27 2 66 93 39 0 25 43 82 92 84 57 93 26 79 81 25 67 92 76 10 78 21 64 12 66 49 84 64 59 33 96 5 69 85 82 0 37 0 63 99 78 76 47 39 77 51 71 21 31 94 0 55 91 77 75 45 56 67 64 91 31 18 65 41 57 24 76 55 93 85 73 14 95 38 72 78 31 0 62 88 67 76 39 95 18 14 11 65 80 87 1 97 1 99 29 94 2 62 84 85 66 39 43 6 7 46 11 53 46 89 85 68 63 66 13 15 71 7 87 14 0 12 87 90 17 31 65 13 14 4 44 11 37 43 31 96 49 33 24 99 86 0 28 93 80 94 79 27 76 46 97 42 93 28 39 38 4 66 65 79 57 88 27 85 93 5 70 53 77 8 14 8 39 72 99 67 37 18 40 57 28 39 26 36 66 0 52 70 96 42 26 91 2 8 53 45 81 15 35 15 38 58 78 97 50 4 83 73 83 71 96 93 68 38 64 42 92 29 74 31 48 18 65 58 17 89 9 19 39 62 79 6 41 37 24 93 74 85 89 55 98 96 66 10 62 25 26 82 77 54 73 37 17 10 88 64 36 54 75 34 63 28 99 99 58 90 29 13 66 67 11 32 38 44 61 88 97 86 48 41 32 65 72 38 93 66 40 18 79 86 47 85 6 48 68 51 61 85 76 12 87 46 44 36 78 16 97 15 64 15 81 88 80 22 98 7 40 81 86 55 10 22 55 28 27 51 69 34 70 94 65 2 73 61 78 49 21 17 15 63 1 21 26 2 92 44 94 35 43 86 72 42 35 46 42 22 57 89 12 29 41 52 92 47 89 12 16 59 31 67 18 74 51 48 9 54 33 94 64 60 13 37 48 64 2 20 75 82 86 74 69 34 86 19 6 18 18 94 55 71 68 3 27 7 97 20 22 75 79 81 29 61 43 12 54 29

>>10752